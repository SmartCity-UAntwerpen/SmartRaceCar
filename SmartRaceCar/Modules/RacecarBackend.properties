# The MQTT Broker to use
# You should try to use the UA broker as much as possible
# If you can't use the UA broker for some reason, you can use the HiveMQ broker.
# These URLs should always be preceded by "tcp://"
#mqtt.broker=tcp://smartcity.ddns.net:1883
mqtt.broker=tcp://broker.hivemq.com

# The username to use when connecting to the MQTT broker.
mqtt.username=root

# The password to use when connecting to the MQTT broker.
mqtt.password=smartcity

# The MQTT topic to subscribe to
mqtt.topic=racecar

# Run the RacecarBackend without using the backbone
#   true = Ignore backbone
#   false = Use backbone
Backbone.debug=false

# The URL that points to the Backbone's REST Endpoints.
Backbone.url=http://smartcity.ddns.net:10000
#Backbone.url=172.16.0.139:10000

# The URL that points to the our own REST Endpoints.
# The localhost URL should only be used for debugging
#Racecar.url=http://smartcity.ddns.net:8081/carmanager
Racecar.url=http://localhost:8081/carmanager

# The folder where all maps (PGM + YAML file) are stored
Maps.path=maps

# The map that is currently used
Maps.current=U014

# Run the MapManager without using the Map database
#   true = Ignore database
#   false = Use database
Maps.database.debug =false

# Run Without making use of the ROS server.
#   true = Ignore ROS Server
#   false = Use ROS Server
Ros.debug=false

# The URL of the ROS Server
Ros.url=http://smartcity.ddns.net:8084

# Because the car can't turn, we have a setting called "increasing_ids"
# If this is set to true, the CostCache will return a cost of infinity (2^31) for any paths where the destination has a lower ID than the starting point
# This is because,  on the map of the U014, the orientation of each waypoint points towards the next waypoint, this prevents the (real) car from turning around.
Cost.increasing_ids=true

Cost.upper_range=11.0
Cost.lower_range=0.0